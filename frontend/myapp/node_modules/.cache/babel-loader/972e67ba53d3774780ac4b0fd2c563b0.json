{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\e-commerce-react\\\\frontend\\\\myapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; //create client id from console.cloud.google.com\n//importing components\n\nimport Login from './components/Login.js';\nimport Homepage from './components/Homepage.js';\n\nfunction App() {\n  _s();\n\n  const [idtoken, setIdtoken] = useState(null);\n  const [loggedinname, setloggedinname] = useState(null);\n  const [type, setType] = useState(\"customer\");\n  const [loggedinUserType, setloggedinUserType] = useState(null);\n\n  const setTokenOnSuccess = (userid, username, usertype) => {\n    setIdtoken(userid);\n    setloggedinname(username);\n    setloggedinUserType(usertype);\n  };\n\n  const responsesuccessGoogle = response => {\n    console.log(response); //const data =  {tokenId: response.tokenId};\n\n    axios({\n      method: \"POST\",\n      url: \"http://localhost:5000/auth/googlelogin\",\n      data: {\n        tokenId: response.tokenId,\n        type: type\n      }\n    }).then(res => {\n      console.log(\"Google Login done Successfully!\", res.data.user._id, res.data.user.name, res.data.user.type);\n      setIdtoken(res.data.user._id);\n      setloggedinname(res.data.user.name);\n      setloggedinUserType(res.data.user.type);\n    });\n  };\n\n  const responseerrorGoogle = response => {\n    console.log(\"Login failure\");\n  };\n\n  const responseFacebook = response => {\n    console.log(response);\n    axios({\n      method: \"POST\",\n      url: \"http://localhost:5000/auth/facebooklogin\",\n      data: {\n        accessToken: response.accessToken,\n        userID: response.userID,\n        type: type\n      }\n    }).then(res => {\n      console.log(\"Facebook Login done Successfully!\", res.data.user._id, res.data.user.name, res.data.user.type);\n      setIdtoken(res.data.user._id);\n      setloggedinname(res.data.user.name);\n      setloggedinUserType(res.data.user.type);\n    });\n  };\n\n  const logout = () => {\n    setIdtoken(null);\n    setloggedinname(null);\n    setloggedinUserType(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: idtoken ? /*#__PURE__*/_jsxDEV(Homepage, {\n      username: loggedinname,\n      logout: logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      responsesuccessGoogle: responsesuccessGoogle,\n      responseerrorGoogle: responseerrorGoogle,\n      responseFacebook: responseFacebook,\n      setTokenOnSuccess: setTokenOnSuccess,\n      setType: setType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RH6cvvUimI8zHTYTNCvppjv56K0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/hp/Downloads/e-commerce-react/frontend/myapp/src/App.js"],"names":["React","useState","axios","Login","Homepage","App","idtoken","setIdtoken","loggedinname","setloggedinname","type","setType","loggedinUserType","setloggedinUserType","setTokenOnSuccess","userid","username","usertype","responsesuccessGoogle","response","console","log","method","url","data","tokenId","then","res","user","_id","name","responseerrorGoogle","responseFacebook","accessToken","userID","logout"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n//create client id from console.cloud.google.com\n\n//importing components\nimport Login from './components/Login.js';\nimport Homepage from './components/Homepage.js';\n\nfunction App() {\n\n  const [idtoken, setIdtoken] = useState(null);\n  const [loggedinname, setloggedinname] = useState(null);\n  const [type, setType] = useState(\"customer\");\n  const [loggedinUserType, setloggedinUserType] = useState(null);\n\n  const setTokenOnSuccess = (userid, username, usertype) => {\n    setIdtoken(userid);\n    setloggedinname(username);\n    setloggedinUserType(usertype);\n  }\n\n  const responsesuccessGoogle = (response) => {\n      console.log(response);\n      //const data =  {tokenId: response.tokenId};\n      \n        axios({\n          method: \"POST\",\n          url: \"http://localhost:5000/auth/googlelogin\",\n          data: {tokenId: response.tokenId, type: type},\n          \n        }).then(res => {\n          console.log(\"Google Login done Successfully!\", res.data.user._id, res.data.user.name, res.data.user.type);\n          setIdtoken(res.data.user._id);\n          setloggedinname(res.data.user.name);\n          setloggedinUserType(res.data.user.type);\n        });\n  }\n\n  const responseerrorGoogle = (response) => {\n      console.log(\"Login failure\");\n  }\n\n  const responseFacebook = (response) => {\n    console.log(response);\n    axios({\n      method: \"POST\",\n      url: \"http://localhost:5000/auth/facebooklogin\",\n      data: {accessToken: response.accessToken, userID: response.userID, type: type},\n      \n    }).then(res => {\n      console.log(\"Facebook Login done Successfully!\", res.data.user._id, res.data.user.name, res.data.user.type);\n      setIdtoken(res.data.user._id);\n      setloggedinname(res.data.user.name);\n      setloggedinUserType(res.data.user.type);\n    });\n}\n\n  const logout = () => {\n    setIdtoken(null);\n    setloggedinname(null);\n    setloggedinUserType(null);\n\n  }\n\n  return (\n    <div>\n      {\n        idtoken ? (\n          <Homepage username = {loggedinname} logout = {logout} />\n        ) : (\n          <Login responsesuccessGoogle={responsesuccessGoogle} responseerrorGoogle={responseerrorGoogle} responseFacebook={responseFacebook} setTokenOnSuccess = {setTokenOnSuccess} setType = {setType} />\n        )\n      }\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}